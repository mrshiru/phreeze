<?php
/**
 * AccountController is the controller class for the Account object
 *
 * @author Generated by ClassBuilder
 * @version 1.0
 */
 
require_once("verysimple/Phreeze/Controller.php");
require_once("Model/Account.php");

class AccountController extends Controller
{

	protected function Init()
	{
		$this->ModelName = "Account";
	}
	
	// base functions suggested to override
	// function ListAll() {}

	function ListPage()
	{
		// these are used by yui-ext pager grid
		$cp = Request::Get('page',1);
		$ps = Request::Get('pageSize',10);
		$sc = Request::Get('sortColumn',0);
		$sd = Request::Get('sortDir','ASC');
		
		// TODO: if all columns are not displayed in the view, then the sortColumn number
		// will not match with the class variables, so you must manually convert
		// the column number into a valid property name
		require_once("Model/DAO/AccountCriteria.php");
		$criteria = new AccountCriteria();
		$cols = $this->GetColumns();
		$criteria->SetOrder($cols[$sc], ($sd == "ASC") );
		
		$datapage = $this->Phreezer->Query("Account",$criteria)->GetDataPage($cp,$ps);
		
		$this->RenderXML($datapage);
	}
	
	function Display()
	{
		$this->_AssignModel(Request::Get("Id"));
		$this->Render("AccountDisplay");
	}

	function Edit()
	{
		$this->_AssignModel(Request::Get("Id"));
		$this->Render("AccountEdit");
	}
	
	function Create()
	{
		$this->_AssignModel();
		$this->Render("AccountEdit");
	}
	
	function Save()
	{
		$pk = Request::Get("Id");
		$account = $this->LoadFromForm($pk);
		
		if (!$account->Validate())
		{
			$this->Assign("account", $account);
			$this->_AssignChildren($account);
			$this->Assign("warning",implode("<br />",$account->GetValidationErrors()));
			$this->Render("AccountEdit");
		}
		else
		{
			try
			{
				$account->Save();
				$this->Redirect("Account/ListAll","Account was saved");
			}
			catch(Exception $ex)
			{
				$this->Assign("account", $account);
				$this->_AssignChildren($account);
				$this->Assign("warning",$ex->getMessage());
				$this->Render("AccountEdit");
			}

		}
	}

	function Delete()
	{
		$pk = Request::Get("Id");
		$account = $this->Phreezer->Get("Account",$pk);
		$account->Delete();
		$this->Redirect("Account/ListAll","Account was deleted");
	}

	private function _AssignModel($pk = null, $assign_children = true)
	{
		$account = $pk ? $this->Phreezer->Get("Account",$pk) : New Account($this->Phreezer);
		$this->Assign("account", $account);

		if ($assign_children)
		{
			$this->_AssignChildren($account);
		}
	}

	
	protected function LoadFromForm($pk = null)
	{
		$account = $pk ? $this->Phreezer->Get("Account",$pk) : New Account($this->Phreezer);
		// $account->Id = Request::Get("Id"); // uncomment if primary key is editable
		$account->Status = Request::Get("Status");
		$account->RoleId = Request::Get("RoleId");
		$account->FirstName = Request::Get("FirstName");
		$account->LastName = Request::Get("LastName");
		$account->Username = Request::Get("Username");
		$account->Password = Request::Get("Password");
		$account->Homepage = Request::Get("Homepage");
		$account->Company = Request::Get("Company");
		$account->Address1 = Request::Get("Address1");
		$account->City = Request::Get("City");
		$account->State = Request::Get("State");
		$account->Zip = Request::Get("Zip");
		$account->Phone = Request::Get("Phone");
		$account->Fax = Request::Get("Fax");
		$account->Email = Request::Get("Email");
		$account->TaxId = Request::Get("TaxId");
		$account->TaxFile = Request::Get("TaxFile");
		$account->Created = ($account->Created) ? $account->Created : Request::GetAsDateTime("");
		$account->Modified = Request::GetAsDateTime("");
		
		return $account;
	}
	
	private function _AssignChildren($account)
	{
		// get possible values for RoleId and assign as a value pair for html_options
		$role_ids = array();
		$collection = $this->Phreezer->Query("Role");
		while ($role_id = $collection->Next())
		{
			$role_ids[$role_id->Id] = $role_id->Name; // TODO: verify this is the right field
		}
		$this->Assign("RoleIdPairs",$role_ids);

		// get CommentsAssignedFrom child records and assign as DataPage for grid display
		$CommentsAssignedFrom = $account->GetCommentsAssignedFrom()->GetDataPage(1,9999); // TODO: update if pagination is necessary
		$this->Assign("CommentsAssignedFromDataPage",$CommentsAssignedFrom);

		// get CommentsAssignedTo child records and assign as DataPage for grid display
		$CommentsAssignedTo = $account->GetCommentsAssignedTo()->GetDataPage(1,9999); // TODO: update if pagination is necessary
		$this->Assign("CommentsAssignedToDataPage",$CommentsAssignedTo);

		// get CommentsCreatedBy child records and assign as DataPage for grid display
		$CommentsCreatedBy = $account->GetCommentsCreatedBy()->GetDataPage(1,9999); // TODO: update if pagination is necessary
		$this->Assign("CommentsCreatedByDataPage",$CommentsCreatedBy);

		// get TicketsAssignedTo child records and assign as DataPage for grid display
		$TicketsAssignedTo = $account->GetTicketsAssignedTo()->GetDataPage(1,9999); // TODO: update if pagination is necessary
		$this->Assign("TicketsAssignedToDataPage",$TicketsAssignedTo);

		// get TicketsSubmittedBy child records and assign as DataPage for grid display
		$TicketsSubmittedBy = $account->GetTicketsSubmittedBy()->GetDataPage(1,9999); // TODO: update if pagination is necessary
		$this->Assign("TicketsSubmittedByDataPage",$TicketsSubmittedBy);

		// get Units child records and assign as DataPage for grid display
		$Units = $account->GetUnits()->GetDataPage(1,9999); // TODO: update if pagination is necessary
		$this->Assign("UnitsDataPage",$Units);

	}
}

?>